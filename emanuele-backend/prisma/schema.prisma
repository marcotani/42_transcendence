generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model FriendRequest {
  id         Int           @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  fromUser User @relation("FriendRequestsSent", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("FriendRequestsReceived", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId, status])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id               Int             @id @default(autoincrement())
  email            String?         @unique
  username         String          @unique
  password_hash    String
  password_salt    String
  twoFactorEnabled Boolean         @default(false)
  twoFactorSecret  String?         
  createdAt        DateTime        @default(now())
  online           Boolean         @default(false)
  lastHeartbeat    DateTime?
  profile          Profile?
  stats            UserStat?
  friends          Friend[]        @relation("UserFriends")
  friendedBy       Friend[]        @relation("UserFriendedBy")
  sentRequests     FriendRequest[] @relation("FriendRequestsSent")
  receivedRequests FriendRequest[] @relation("FriendRequestsReceived")
  player1Matches   Match[]         @relation("Player1Matches")
  player2Matches   Match[]         @relation("Player2Matches")
  wonMatches       Match[]         @relation("WonMatches")
}

model Profile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  bio       String  @default("")
  avatarUrl String  @default("/static/default-avatar.png")
  alias     String?
  skinColor String? @default("#FFFFFF")
  gdpr      Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friend {
  id       Int  @id @default(autoincrement())
  userId   Int
  friendId Int
  user     User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend   User @relation("UserFriendedBy", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model UserStat {
  id             Int  @id @default(autoincrement())
  userId         Int  @unique
  botWins        Int  @default(0)
  botLosses      Int  @default(0)
  playerWins     Int  @default(0)
  playerLosses   Int  @default(0)
  tournamentWins Int  @default(0)
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Match {
  id             Int       @id @default(autoincrement())
  player1Id      Int
  player2Id      Int?
  player2BotName String?
  player1Score   Int
  player2Score   Int
  winnerId       Int?
  matchDate      DateTime  @default(now())
  matchType      String
  
  player1 User @relation("Player1Matches", fields: [player1Id], references: [id], onDelete: Cascade)
  player2 User? @relation("Player2Matches", fields: [player2Id], references: [id], onDelete: Cascade)
  winner  User? @relation("WonMatches", fields: [winnerId], references: [id], onDelete: Cascade)
}
